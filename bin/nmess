#!/usr/bin/env node

var cli = require('commander'),
	rands = require('random-string'),
	down = require('download'),
	replace = require('replace'),
	fs = require('fs'),
	path = require('path'),
	pkg = require('../package'),
	exec = require('child_process').exec;

cli
	.version(pkg.version)
	.usage('[options] <name>')
	.option('-d, --directory [directory]', 'application directory (name)')
	.option('-s, --secret [secret]', 'session secret (random)')
	.option('-b, --database [db]', 'local database name (name)')
	.parse(process.argv);

var options = {
	name: cli.args[0] || (function() {
		throw new Error('Name not specified.')
	})()
};

options.directory = cli.directory || options.name;
options.secret = cli.secret || rands();
options.database = cli.database || options.name;

console.log('Downloading...');
(new down()).get('https://github.com/edge/nmess/archive/master.zip', options.directory, {
	extract: true,
	strip: 1
}).run(function() {

	console.log('Populating...');

	var renameRecursive = function(dir, find, replacewith) {
		var children = fs.readdirSync(dir),
			current,
			replacecurrent;
		for (var i = 0; i < children.length; i++) {
			current = path.join(dir, children[i]);
			replacecurrent = current.replace(find, replacewith);
			fs.renameSync(current, replacecurrent);
			if (fs.statSync(replacecurrent).isDirectory()) {
				renameRecursive(replacecurrent, find, replacewith);
			}
		}
	},
		populateTemplates = function(find, replacewith) {
			renameRecursive(options.directory, find, replacewith);
			replace({
				regex: find,
				replacement: replacewith,
				paths: [options.directory],
				recursive: true,
				silent: true
			});
		};

	populateTemplates(/__name__/g, options.name);
	populateTemplates(/__secret__/g, options.secret);
	populateTemplates(/__db__/g, options.database);

	console.log('Installing...');

	exec('cd ' + options.directory + ' && npm install', function(err) {
		if (err) {
			console.log('Error: ' + JSON.stringify(arguments, null, 4));
		}
		else {

			console.log('Building...');

			exec('cd ' + options.directory + ' && gulp compile', function(err) {
				if (err) {
					console.log('Error: ' + JSON.stringify(arguments, null, 4));
				}
				else {
					console.log('Node MESS Application generated with:')
					console.log('name:      ' + options.name);
					console.log('directory: ' + options.directory);
					console.log('secret:    ' + options.secret);
					console.log('db:        ' + options.database);
				}
			});
		}
	});

});
